// <auto-generated />
using System;
using Dgmjr.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dgmjr.Identity.EntityFrameworkCore.Migrations.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.1.23419.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationClaimType<long>ApplicationUser<long>", b =>
                {
                    b.Property<long>("ClaimTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("ClaimTypesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationClaimType<long>ApplicationUser<long>", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("ApplicationClaimType<long>ApplicationUser<long>History", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationClaimType<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApplicationClaimTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationClaimType<long>Id");

                    b.Property<long?>("ApplicationClaimValueTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationClaimValueType<long>Id");

                    b.Property<long?>("ApplicationRoleClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationRoleClaim<long>Id");

                    b.Property<long>("ClaimValueTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_ClaimType");

                    b.HasIndex("ApplicationClaimTypeId");

                    b.HasIndex("ApplicationClaimValueTypeId");

                    b.HasIndex("ApplicationRoleClaimId");

                    b.HasIndex("ClaimValueTypeId");

                    b.HasIndex("Uri")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_ClaimType_Uri");

                    b.ToTable("tbl_ClaimType", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_ClaimTypeHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationClaimValueType<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_ClaimValueType");

                    b.ToTable("tbl_ClaimValueType", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_ClaimValueTypeHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_Role");

                    b.ToTable("tbl_Role", "id", t =>
                        {
                            t.HasComment("The Roles table contains the roles for the application.");
                        });

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_RoleHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationRoleClaim<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("OriginalIssuer")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_RoleClaim");

                    b.HasIndex("RoleId");

                    b.HasIndex("Type");

                    b.ToTable("tbl_RoleClaim", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_RoleClaimHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUser<long>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasDefaultValue("?")
                        .HasComment("Gender data types:\nM: Male (A person of the male sex, i.e., a human being with both an X and a Y chromosome and (usually) a penis (e.g., eunuchs and nullos are also still men).)\nF: Female (A person of the female sex, i.e., a human being with two X chromosomes and (usually) a vagina.  Does not (and never will) have a penis.)\nXYYM: XYY Male (A person of the male sex, i.e., a human being with both an X and a Y chromosome, and (usually) a penis, as well as an extra \"Y\" chromosome (for good luck).)\nXXYM: XXY Male (A person of the male sex, i.e., a human being with both an X and a Y chromosome, and (usually) a penis, as well as an extra \"X\" chromosome (for good luck).)\n?: Unknown (A person of unknown sex.)\nO: Genderqueer (Someone who thinks it is sooooooo special that it is in a gender all of its own.)\nA: Agender (A schizophrenic human who thinks s/he is too fucking special & refuses to identify with either gender (even if it's blatantly obvious))\nO: Genderfluid (A schizophrenic human who thinks \"they\" are simultaneously male and female.)\nN: Gender Neutral (A human who thinks s/he is too special.)\nTM: Transman (A confused female who fancies herself a male.  Often takes testosterone supplements to grow facial hair, but can't change her DNA or the fact that she doesn't (and never will) have a penis..)\nTF: Transwoman (A confused male who fancies himself a female.  Often gets breast implants.  May or may not have his penis surgically removed, but still can't change his DNA.)\nO: Genderfluid (A schizophrenic human who thinks \"they\" are simultaneously male and female.)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsEmailConfirmed")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsLockedOut")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasColumnName("IsLockedOut")
                        .HasComputedColumnSql("cast(CASE WHEN LockoutEnd IS NOT NULL AND LockoutEnd > GetUtcDate() THEN 1 ELSE 0 END as bit)");

                    b.Property<bool>("IsLockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsLockoutEnabled")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsPhoneNumberConfirmed")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsTwoFactorEnabled")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("'1/1/1970 12:00:00 AM -05:00'");

                    b.Property<string>("NormalizedEmailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Username")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_User");

                    b.HasIndex("EmailAddress")
                        .HasDatabaseName("IX_tbl_UserEmail");

                    b.HasIndex("NormalizedEmailAddress")
                        .HasDatabaseName("IX_tbl_UserNormalizedEmailAddress");

                    b.HasIndex("NormalizedUsername")
                        .HasDatabaseName("IX_tbl_UserNormalizedUsername");

                    b.HasIndex("TelegramUsername")
                        .HasDatabaseName("IX_tbl_UserTelegramUsername");

                    b.HasIndex("Username")
                        .HasDatabaseName("IX_tbl_UserUsername");

                    b.ToTable("tbl_User", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_UserHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserClaim<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("OriginalIssuer")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_UserClaim");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserClaim", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_UserClaimHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserLogin<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_tbl_UserLogin");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserLogin", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_UserLoginHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleId")
                        .HasColumnOrder(2);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId")
                        .HasColumnOrder(1);

                    b.HasKey("Id")
                        .HasName("PK_tbl_UserRole");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserRole", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_UserRoleHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserToken<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("Created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Value");

                    b.HasKey("Id")
                        .HasName("PK_tbl_UserToken");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserToken", "id");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("tbl_UserTokenHistory", "id");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("ApplicationClaimType<long>ApplicationUser<long>", b =>
                {
                    b.HasOne("Dgmjr.Identity.Models.ApplicationClaimType<long>", null)
                        .WithMany()
                        .HasForeignKey("ClaimTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dgmjr.Identity.Models.ApplicationUser<long>", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationClaimType<long>", b =>
                {
                    b.HasOne("Dgmjr.Identity.Models.ApplicationClaimType<long>", null)
                        .WithMany("ClaimTypes")
                        .HasForeignKey("ApplicationClaimTypeId");

                    b.HasOne("Dgmjr.Identity.Models.ApplicationClaimValueType<long>", null)
                        .WithMany("ClaimTypes")
                        .HasForeignKey("ApplicationClaimValueTypeId");

                    b.HasOne("Dgmjr.Identity.Models.ApplicationRoleClaim<long>", null)
                        .WithMany("ClaimTypes")
                        .HasForeignKey("ApplicationRoleClaimId");

                    b.HasOne("Dgmjr.Identity.Models.ApplicationClaimValueType<long>", "ClaimValueType")
                        .WithMany()
                        .HasForeignKey("ClaimValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimValueType");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationRoleClaim<long>", b =>
                {
                    b.HasOne("Dgmjr.Identity.Models.ApplicationRole<long>", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dgmjr.Identity.Models.ApplicationClaimType<long>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .HasPrincipalKey("Uri")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserClaim<long>", b =>
                {
                    b.HasOne("Dgmjr.Identity.Models.ApplicationUser<long>", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserLogin<long>", b =>
                {
                    b.HasOne("Dgmjr.Identity.Models.ApplicationUser<long>", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserRole<long>", b =>
                {
                    b.HasOne("Dgmjr.Identity.Models.ApplicationRole<long>", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dgmjr.Identity.Models.ApplicationUser<long>", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUserToken<long>", b =>
                {
                    b.HasOne("Dgmjr.Identity.Models.ApplicationUser<long>", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationClaimType<long>", b =>
                {
                    b.Navigation("ClaimTypes");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationClaimValueType<long>", b =>
                {
                    b.Navigation("ClaimTypes");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationRole<long>", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationRoleClaim<long>", b =>
                {
                    b.Navigation("ClaimTypes");
                });

            modelBuilder.Entity("Dgmjr.Identity.Models.ApplicationUser<long>", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
